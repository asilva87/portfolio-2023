{
  // For more information, visit: https://go.microsoft.com/fwlink/?LinkId=733558
  "version": "2.0.0",
  "tasks": [
    {
      "type": "npm",
      "script": "start",
      "isBackground": true,
      "problemMatcher": {
        "owner": "typescript",
        "pattern": "$tsc",
        "background": {
          "activeOnStart": true,
          "beginsPattern": {
            "regexp": "(.*?)"
          },
          "endsPattern": {
            "regexp": "bundle generation complete"
          }
        }
      }
    },
    {
      "type": "npm",
      "script": "test",
      "isBackground": true,
      "problemMatcher": {
        "owner": "typescript",
        "pattern": "$tsc",
        "background": {
          "activeOnStart": true,
          "beginsPattern": {
            "regexp": "(.*?)"
          },
          "endsPattern": {
            "regexp": "bundle generation complete"
          }
        }
      }
    }
  ]
}

// This is a configuration for a task in VSCode's "tasks.json" file that runs an NPM script using the "npm run start"
// command. Here is what each property does:

//     "type": "npm": Specifies the type of task runner to use, which in this case is "npm".
//     "script": "start": Specifies the name of the script to run, which in this case is "start".
//     "isBackground": true: Tells VSCode to run this task in the background, which means that it doesn't block the 
//      terminal window and can continue running while you work on other tasks.
//     "problemMatcher": Specifies a problem matcher to use for this task. A problem matcher is a way to capture and
//      parse error messages or other output from the task and present them in a way that is useful to the user.

// The problem matcher in this task is configured to match errors and output from the TypeScript compiler ($tsc) and
// the background bundling process that is triggered by the start script. The "beginsPattern" and endsPattern properties
// are regular expressions that match the beginning and end of the output that is generated by the bundling process.

// The "activeOnStart" property in the background object of the "problemMatcher" property of a task specifies whether
// the problem matcher should be activated when the task starts running. If "activeOnStart" is set to true, the problem
// matcher will start running as soon as the task is launched, and any output generated by the task will be matched
// against the problem matcher's patterns. If "activeOnStart" is set to false, the problem matcher will not start running
// until it is activated by some other means, such as by pressing a keyboard shortcut.

// The "owner" property is used to specify which language server is responsible for detecting errors, warnings or other
// messages produced by running the task. In the above example, the "owner" is set to "typescript", which means that the
// tsc compiler of TypeScript will be used to detect problems during the build process. The "owner" property can also be
// set to other values depending on the type of task being run and the language server responsible for detecting problems.